{
  "format": {
    "_help_line_width": [
      "How wide to allow formatted cmake files"
    ],
    "line_width": 120,
    "_help_tab_size": [
      "How many spaces to tab for indent"
    ],
    "tab_size": 2,
    "_help_max_subgroups_hwrap": [
      "If an argument group contains more than this many sub-groups",
      "(parg or kwarg groups) then force it to a vertical layout."
    ],
    "max_subgroups_hwrap": 2,
    "_help_max_pargs_hwrap": [
      "If a positional argument group contains more than this many",
      "arguments, then force it to a vertical layout."
    ],
    "max_pargs_hwrap": 6,
    "_help_max_rows_cmdline": [
      "If a cmdline positional group consumes more than this many",
      "lines without nesting, then invalidate the layout (and nest)"
    ],
    "max_rows_cmdline": 5,
    "_help_separate_ctrl_name_with_space": [
      "If true, separate flow control names from their parentheses",
      "with a space"
    ],
    "separate_ctrl_name_with_space": false,
    "_help_separate_fn_name_with_space": [
      "If true, separate function names from parentheses with a",
      "space"
    ],
    "separate_fn_name_with_space": false,
    "_help_dangle_parens": [
      "If a statement is wrapped to more than one line, than dangle",
      "the closing parenthesis on its own line."
    ],
    "dangle_parens": true,
    "_help_dangle_align": [
      "If the trailing parenthesis must be 'dangled' on its on",
      "line, then align it to this reference: `prefix`: the start",
      "of the statement,  `prefix-indent`: the start of the",
      "statement, plus one indentation  level, `child`: align to",
      "the column of the arguments"
    ],
    "dangle_align": "prefix",
    "_help_min_prefix_chars": [
      "If the statement spelling length (including space and",
      "parenthesis) is smaller than this amount, then force reject",
      "nested layouts."
    ],
    "min_prefix_chars": 4,
    "_help_max_prefix_chars": [
      "If the statement spelling length (including space and",
      "parenthesis) is larger than the tab width by more than this",
      "amount, then force reject un-nested layouts."
    ],
    "max_prefix_chars": 10,
    "_help_max_lines_hwrap": [
      "If a candidate layout is wrapped horizontally but it exceeds",
      "this many lines, then reject the layout."
    ],
    "max_lines_hwrap": 2,
    "_help_line_ending": [
      "What style line endings to use in the output."
    ],
    "line_ending": "auto",
    "_help_command_case": [
      "Format command names consistently as 'lower' or 'upper' case"
    ],
    "command_case": "lower",
    "_help_keyword_case": [
      "Format keywords consistently as 'lower' or 'upper' case"
    ],
    "keyword_case": "upper",
    "_help_always_wrap": [
      "A list of command names which should always be wrapped"
    ],
    "always_wrap": [],
    "_help_enable_sort": [
      "If true, the argument lists which are known to be sortable",
      "will be sorted lexicographically"
    ],
    "enable_sort": true,
    "_help_autosort": [
      "If true, the parsers may infer whether or not an argument",
      "list is sortable (without annotation)."
    ],
    "autosort": true,
    "_help_require_valid_layout": [
      "By default, if cmake-format cannot successfully fit",
      "everything into the desired line-width it will apply the",
      "last, most aggressive attempt that it made. If this flag is",
      "True, however, cmake-format will print error, exit with non-",
      "zero status code, and write-out nothing"
    ],
    "require_valid_layout": false,
    "_help_layout_passes": [
      "A dictionary mapping layout nodes to a list of wrap",
      "decisions. See the documentation for more information."
    ],
    "layout_passes": {}
  },
  "markup": {
    "enable_markup": false
  }
}
